<!Doctype html>
<html>
<head>
    <meta charset="utf-8">
    <title>Live Dynamics</title>
    <link rel="stylesheet" type="text/css" href="/styles.css">
</head>
<body>
    <h1>Live Dynamics</h1>
    <form ref='uploadForm' id='uploadForm' action='/upload' method='post' encType="multipart/form-data">
        <input type="file" name="file" id="fileInput"/>
        <button type='submit'>Upload</button>
    </form>
    
    <p id="loadingMessage" style="display:none; color:grey;" class="center">loading...</p>
    
    <div id="teams" style="display:none;" class="center">
        <div class="team">
            <h2>HOME : <span id="homeTeam">파주시민축구단</span></h2>
            <ul id="homePlayers">
                <li>[01]박민선(GK)</li>
                <li>[04]박종성</li>
                <li>[06]김승찬</li>
                <li>[23]신원철</li>
                <li>[66]배진우</li>
                <li>[05]오상준</li>
                <li>[09]류연준(C)</li>
                <li>[10]예병원</li>
                <li>[16]정호영</li>
                <li>[07]성정윤</li>
                <li>[99]루카스</li>
            </ul>
        </div>
        <div class="team">
            <h2>AWAY : <span id="awayTeam">여주FC</span></h2>
            <ul id="awayPlayers">
                <li>[77]김상재(GK)</li>
                <li>[06]이동건</li>
                <li>[12]김성현(C)</li>
                <li>[07]이태형</li>
                <li>[24]박준택</li>
                <li>[33]윤보람</li>
                <li>[94]조상범</li>
                <li>[11]한창구</li>
                <li>[19]이태훈</li>
                <li>[29]곽효건</li>
                <li>[90]이호종</li>
            </ul>
        </div>
    </div>
    
    <div id="button-container">
        <button id="originalVideoButton" onclick="checkOriginalVideo()">원본영상 확인하기</button>
        <button id="analyzedVideoButton" onclick="checkAnalyzedVideo()">영상 분석하기</button>
        <button id="formerClipsButton" onclick="location.href='/formerclips'">이전 경기 분석 보러가기</button>
    </div>

    <div id="analysisMessageContainer" class="center" style="display:none;">
        <hr/>
        <div id="analysisMessage">영상을 분석중입니다 ...</div>
    </div>

    <div id="video-player-container" style="display:none;" class="center">
        <video id="video-player" width="80%" controls>
            <source src="" type="video/mp4">
            Your browser does not support the video tag.
        </video>
    </div>

    <script>
        let lastUploadTime = null;
        let lastUploadedFileName = null;

        document.getElementById('uploadForm').addEventListener('submit', function(event) {
            event.preventDefault();
            const formData = new FormData(this);
            const loadingMessage = document.getElementById('loadingMessage');
            const teams = document.getElementById('teams');

            loadingMessage.style.display = 'block';

            fetch('/upload', {
                method: 'POST',
                body: formData
            })
            .then(response => response.text())
            .then(result => {
                loadingMessage.style.display = 'none';
                teams.style.display = 'flex';
                lastUploadTime = new Date();
                lastUploadedFileName = document.getElementById('fileInput').files[0].name;
            })
            .catch(error => {
                console.error('Error:', error);
            });
        });

        function hideAnalysisMessage() {
            const analysisMessageContainer = document.getElementById('analysisMessageContainer');
            analysisMessageContainer.style.display = 'none';
        }

        function hideVideoPlayer() {
            const videoPlayerContainer = document.getElementById('video-player-container');
            videoPlayerContainer.style.display = 'none';
            const videoPlayer = document.getElementById('video-player');
            videoPlayer.pause();
            videoPlayer.src = "";
        }

        function checkOriginalVideo() {
            hideAnalysisMessage();
            hideVideoPlayer();

            if (!lastUploadTime || !lastUploadedFileName) {
                alert('동영상을 업로드하세요');
            } else {
                fetch(`/check-file-exists?file=${encodeURIComponent(lastUploadedFileName)}&type=original`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.exists) {
                            playVideo(`/uploads/${encodeURIComponent(lastUploadedFileName)}`);
                        } else {
                            alert('동영상을 업로드하세요');
                        }
                    });
            }
        }

        function checkAnalyzedVideo() {
            hideAnalysisMessage();
            hideVideoPlayer();

            const analysisMessageContainer = document.getElementById('analysisMessageContainer');
            analysisMessageContainer.style.display = 'block';

            fetch('/check-latest-file?type=analyzed')
                .then(response => response.json())
                .then(data => {
                    if (data.exists) {
                        analysisMessageContainer.style.display = 'none';
                        playVideo(`/edits/${encodeURIComponent(data.file)}`);
                    } else {
                        alert('분석된 영상을 찾을 수 없습니다');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }

        function playVideo(url) {
            const videoPlayerContainer = document.getElementById('video-player-container');
            const videoPlayer = document.getElementById('video-player');
            videoPlayer.src = url;
            videoPlayerContainer.style.display = 'block';
            videoPlayer.play();
        }

        function fetchFileList() {
            fetch('/list')
                .then(response => response.json())
                .then(data => {
                    const videoList = document.getElementById('video-list');
                    const emptyMessage = document.getElementById('empty-message');
                    videoList.innerHTML = '';
                    if (data.length === 0) {
                        emptyMessage.style.display = 'block';
                    } else {
                        emptyMessage.style.display = 'none';
                        data.forEach(item => {
                            const videoItem = document.createElement('div');
                            videoItem.className = 'video-item';
                            videoItem.innerHTML = `
                                <p>${item.key}</p>
                                <button onclick="playVideo('${item.url}')">Play</button>
                            `;
                            videoList.appendChild(videoItem);
                        });
                    }
                });
        }

        document.addEventListener('DOMContentLoaded', fetchFileList);
    </script>
</body>
</html>
